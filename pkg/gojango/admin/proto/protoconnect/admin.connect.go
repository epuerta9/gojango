// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/admin.proto

package protoconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	proto "github.com/epuerta9/gojango/pkg/gojango/admin/proto"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AdminServiceName is the fully-qualified name of the AdminService service.
	AdminServiceName = "gojango.admin.AdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AdminServiceListModelsProcedure is the fully-qualified name of the AdminService's ListModels RPC.
	AdminServiceListModelsProcedure = "/gojango.admin.AdminService/ListModels"
	// AdminServiceGetModelSchemaProcedure is the fully-qualified name of the AdminService's
	// GetModelSchema RPC.
	AdminServiceGetModelSchemaProcedure = "/gojango.admin.AdminService/GetModelSchema"
	// AdminServiceListObjectsProcedure is the fully-qualified name of the AdminService's ListObjects
	// RPC.
	AdminServiceListObjectsProcedure = "/gojango.admin.AdminService/ListObjects"
	// AdminServiceGetObjectProcedure is the fully-qualified name of the AdminService's GetObject RPC.
	AdminServiceGetObjectProcedure = "/gojango.admin.AdminService/GetObject"
	// AdminServiceCreateObjectProcedure is the fully-qualified name of the AdminService's CreateObject
	// RPC.
	AdminServiceCreateObjectProcedure = "/gojango.admin.AdminService/CreateObject"
	// AdminServiceUpdateObjectProcedure is the fully-qualified name of the AdminService's UpdateObject
	// RPC.
	AdminServiceUpdateObjectProcedure = "/gojango.admin.AdminService/UpdateObject"
	// AdminServiceDeleteObjectProcedure is the fully-qualified name of the AdminService's DeleteObject
	// RPC.
	AdminServiceDeleteObjectProcedure = "/gojango.admin.AdminService/DeleteObject"
	// AdminServiceDeleteObjectsProcedure is the fully-qualified name of the AdminService's
	// DeleteObjects RPC.
	AdminServiceDeleteObjectsProcedure = "/gojango.admin.AdminService/DeleteObjects"
	// AdminServiceExecuteActionProcedure is the fully-qualified name of the AdminService's
	// ExecuteAction RPC.
	AdminServiceExecuteActionProcedure = "/gojango.admin.AdminService/ExecuteAction"
	// AdminServiceListActionsProcedure is the fully-qualified name of the AdminService's ListActions
	// RPC.
	AdminServiceListActionsProcedure = "/gojango.admin.AdminService/ListActions"
	// AdminServiceSearchObjectsProcedure is the fully-qualified name of the AdminService's
	// SearchObjects RPC.
	AdminServiceSearchObjectsProcedure = "/gojango.admin.AdminService/SearchObjects"
)

// AdminServiceClient is a client for the gojango.admin.AdminService service.
type AdminServiceClient interface {
	// Model introspection
	ListModels(context.Context, *connect.Request[proto.ListModelsRequest]) (*connect.Response[proto.ListModelsResponse], error)
	GetModelSchema(context.Context, *connect.Request[proto.GetModelSchemaRequest]) (*connect.Response[proto.GetModelSchemaResponse], error)
	// CRUD operations
	ListObjects(context.Context, *connect.Request[proto.ListObjectsRequest]) (*connect.Response[proto.ListObjectsResponse], error)
	GetObject(context.Context, *connect.Request[proto.GetObjectRequest]) (*connect.Response[proto.GetObjectResponse], error)
	CreateObject(context.Context, *connect.Request[proto.CreateObjectRequest]) (*connect.Response[proto.CreateObjectResponse], error)
	UpdateObject(context.Context, *connect.Request[proto.UpdateObjectRequest]) (*connect.Response[proto.UpdateObjectResponse], error)
	DeleteObject(context.Context, *connect.Request[proto.DeleteObjectRequest]) (*connect.Response[proto.DeleteObjectResponse], error)
	DeleteObjects(context.Context, *connect.Request[proto.DeleteObjectsRequest]) (*connect.Response[proto.DeleteObjectsResponse], error)
	// Admin actions
	ExecuteAction(context.Context, *connect.Request[proto.ExecuteActionRequest]) (*connect.Response[proto.ExecuteActionResponse], error)
	ListActions(context.Context, *connect.Request[proto.ListActionsRequest]) (*connect.Response[proto.ListActionsResponse], error)
	// Search and filtering
	SearchObjects(context.Context, *connect.Request[proto.SearchObjectsRequest]) (*connect.Response[proto.SearchObjectsResponse], error)
}

// NewAdminServiceClient constructs a client for the gojango.admin.AdminService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdminServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	adminServiceMethods := proto.File_proto_admin_proto.Services().ByName("AdminService").Methods()
	return &adminServiceClient{
		listModels: connect.NewClient[proto.ListModelsRequest, proto.ListModelsResponse](
			httpClient,
			baseURL+AdminServiceListModelsProcedure,
			connect.WithSchema(adminServiceMethods.ByName("ListModels")),
			connect.WithClientOptions(opts...),
		),
		getModelSchema: connect.NewClient[proto.GetModelSchemaRequest, proto.GetModelSchemaResponse](
			httpClient,
			baseURL+AdminServiceGetModelSchemaProcedure,
			connect.WithSchema(adminServiceMethods.ByName("GetModelSchema")),
			connect.WithClientOptions(opts...),
		),
		listObjects: connect.NewClient[proto.ListObjectsRequest, proto.ListObjectsResponse](
			httpClient,
			baseURL+AdminServiceListObjectsProcedure,
			connect.WithSchema(adminServiceMethods.ByName("ListObjects")),
			connect.WithClientOptions(opts...),
		),
		getObject: connect.NewClient[proto.GetObjectRequest, proto.GetObjectResponse](
			httpClient,
			baseURL+AdminServiceGetObjectProcedure,
			connect.WithSchema(adminServiceMethods.ByName("GetObject")),
			connect.WithClientOptions(opts...),
		),
		createObject: connect.NewClient[proto.CreateObjectRequest, proto.CreateObjectResponse](
			httpClient,
			baseURL+AdminServiceCreateObjectProcedure,
			connect.WithSchema(adminServiceMethods.ByName("CreateObject")),
			connect.WithClientOptions(opts...),
		),
		updateObject: connect.NewClient[proto.UpdateObjectRequest, proto.UpdateObjectResponse](
			httpClient,
			baseURL+AdminServiceUpdateObjectProcedure,
			connect.WithSchema(adminServiceMethods.ByName("UpdateObject")),
			connect.WithClientOptions(opts...),
		),
		deleteObject: connect.NewClient[proto.DeleteObjectRequest, proto.DeleteObjectResponse](
			httpClient,
			baseURL+AdminServiceDeleteObjectProcedure,
			connect.WithSchema(adminServiceMethods.ByName("DeleteObject")),
			connect.WithClientOptions(opts...),
		),
		deleteObjects: connect.NewClient[proto.DeleteObjectsRequest, proto.DeleteObjectsResponse](
			httpClient,
			baseURL+AdminServiceDeleteObjectsProcedure,
			connect.WithSchema(adminServiceMethods.ByName("DeleteObjects")),
			connect.WithClientOptions(opts...),
		),
		executeAction: connect.NewClient[proto.ExecuteActionRequest, proto.ExecuteActionResponse](
			httpClient,
			baseURL+AdminServiceExecuteActionProcedure,
			connect.WithSchema(adminServiceMethods.ByName("ExecuteAction")),
			connect.WithClientOptions(opts...),
		),
		listActions: connect.NewClient[proto.ListActionsRequest, proto.ListActionsResponse](
			httpClient,
			baseURL+AdminServiceListActionsProcedure,
			connect.WithSchema(adminServiceMethods.ByName("ListActions")),
			connect.WithClientOptions(opts...),
		),
		searchObjects: connect.NewClient[proto.SearchObjectsRequest, proto.SearchObjectsResponse](
			httpClient,
			baseURL+AdminServiceSearchObjectsProcedure,
			connect.WithSchema(adminServiceMethods.ByName("SearchObjects")),
			connect.WithClientOptions(opts...),
		),
	}
}

// adminServiceClient implements AdminServiceClient.
type adminServiceClient struct {
	listModels     *connect.Client[proto.ListModelsRequest, proto.ListModelsResponse]
	getModelSchema *connect.Client[proto.GetModelSchemaRequest, proto.GetModelSchemaResponse]
	listObjects    *connect.Client[proto.ListObjectsRequest, proto.ListObjectsResponse]
	getObject      *connect.Client[proto.GetObjectRequest, proto.GetObjectResponse]
	createObject   *connect.Client[proto.CreateObjectRequest, proto.CreateObjectResponse]
	updateObject   *connect.Client[proto.UpdateObjectRequest, proto.UpdateObjectResponse]
	deleteObject   *connect.Client[proto.DeleteObjectRequest, proto.DeleteObjectResponse]
	deleteObjects  *connect.Client[proto.DeleteObjectsRequest, proto.DeleteObjectsResponse]
	executeAction  *connect.Client[proto.ExecuteActionRequest, proto.ExecuteActionResponse]
	listActions    *connect.Client[proto.ListActionsRequest, proto.ListActionsResponse]
	searchObjects  *connect.Client[proto.SearchObjectsRequest, proto.SearchObjectsResponse]
}

// ListModels calls gojango.admin.AdminService.ListModels.
func (c *adminServiceClient) ListModels(ctx context.Context, req *connect.Request[proto.ListModelsRequest]) (*connect.Response[proto.ListModelsResponse], error) {
	return c.listModels.CallUnary(ctx, req)
}

// GetModelSchema calls gojango.admin.AdminService.GetModelSchema.
func (c *adminServiceClient) GetModelSchema(ctx context.Context, req *connect.Request[proto.GetModelSchemaRequest]) (*connect.Response[proto.GetModelSchemaResponse], error) {
	return c.getModelSchema.CallUnary(ctx, req)
}

// ListObjects calls gojango.admin.AdminService.ListObjects.
func (c *adminServiceClient) ListObjects(ctx context.Context, req *connect.Request[proto.ListObjectsRequest]) (*connect.Response[proto.ListObjectsResponse], error) {
	return c.listObjects.CallUnary(ctx, req)
}

// GetObject calls gojango.admin.AdminService.GetObject.
func (c *adminServiceClient) GetObject(ctx context.Context, req *connect.Request[proto.GetObjectRequest]) (*connect.Response[proto.GetObjectResponse], error) {
	return c.getObject.CallUnary(ctx, req)
}

// CreateObject calls gojango.admin.AdminService.CreateObject.
func (c *adminServiceClient) CreateObject(ctx context.Context, req *connect.Request[proto.CreateObjectRequest]) (*connect.Response[proto.CreateObjectResponse], error) {
	return c.createObject.CallUnary(ctx, req)
}

// UpdateObject calls gojango.admin.AdminService.UpdateObject.
func (c *adminServiceClient) UpdateObject(ctx context.Context, req *connect.Request[proto.UpdateObjectRequest]) (*connect.Response[proto.UpdateObjectResponse], error) {
	return c.updateObject.CallUnary(ctx, req)
}

// DeleteObject calls gojango.admin.AdminService.DeleteObject.
func (c *adminServiceClient) DeleteObject(ctx context.Context, req *connect.Request[proto.DeleteObjectRequest]) (*connect.Response[proto.DeleteObjectResponse], error) {
	return c.deleteObject.CallUnary(ctx, req)
}

// DeleteObjects calls gojango.admin.AdminService.DeleteObjects.
func (c *adminServiceClient) DeleteObjects(ctx context.Context, req *connect.Request[proto.DeleteObjectsRequest]) (*connect.Response[proto.DeleteObjectsResponse], error) {
	return c.deleteObjects.CallUnary(ctx, req)
}

// ExecuteAction calls gojango.admin.AdminService.ExecuteAction.
func (c *adminServiceClient) ExecuteAction(ctx context.Context, req *connect.Request[proto.ExecuteActionRequest]) (*connect.Response[proto.ExecuteActionResponse], error) {
	return c.executeAction.CallUnary(ctx, req)
}

// ListActions calls gojango.admin.AdminService.ListActions.
func (c *adminServiceClient) ListActions(ctx context.Context, req *connect.Request[proto.ListActionsRequest]) (*connect.Response[proto.ListActionsResponse], error) {
	return c.listActions.CallUnary(ctx, req)
}

// SearchObjects calls gojango.admin.AdminService.SearchObjects.
func (c *adminServiceClient) SearchObjects(ctx context.Context, req *connect.Request[proto.SearchObjectsRequest]) (*connect.Response[proto.SearchObjectsResponse], error) {
	return c.searchObjects.CallUnary(ctx, req)
}

// AdminServiceHandler is an implementation of the gojango.admin.AdminService service.
type AdminServiceHandler interface {
	// Model introspection
	ListModels(context.Context, *connect.Request[proto.ListModelsRequest]) (*connect.Response[proto.ListModelsResponse], error)
	GetModelSchema(context.Context, *connect.Request[proto.GetModelSchemaRequest]) (*connect.Response[proto.GetModelSchemaResponse], error)
	// CRUD operations
	ListObjects(context.Context, *connect.Request[proto.ListObjectsRequest]) (*connect.Response[proto.ListObjectsResponse], error)
	GetObject(context.Context, *connect.Request[proto.GetObjectRequest]) (*connect.Response[proto.GetObjectResponse], error)
	CreateObject(context.Context, *connect.Request[proto.CreateObjectRequest]) (*connect.Response[proto.CreateObjectResponse], error)
	UpdateObject(context.Context, *connect.Request[proto.UpdateObjectRequest]) (*connect.Response[proto.UpdateObjectResponse], error)
	DeleteObject(context.Context, *connect.Request[proto.DeleteObjectRequest]) (*connect.Response[proto.DeleteObjectResponse], error)
	DeleteObjects(context.Context, *connect.Request[proto.DeleteObjectsRequest]) (*connect.Response[proto.DeleteObjectsResponse], error)
	// Admin actions
	ExecuteAction(context.Context, *connect.Request[proto.ExecuteActionRequest]) (*connect.Response[proto.ExecuteActionResponse], error)
	ListActions(context.Context, *connect.Request[proto.ListActionsRequest]) (*connect.Response[proto.ListActionsResponse], error)
	// Search and filtering
	SearchObjects(context.Context, *connect.Request[proto.SearchObjectsRequest]) (*connect.Response[proto.SearchObjectsResponse], error)
}

// NewAdminServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdminServiceHandler(svc AdminServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	adminServiceMethods := proto.File_proto_admin_proto.Services().ByName("AdminService").Methods()
	adminServiceListModelsHandler := connect.NewUnaryHandler(
		AdminServiceListModelsProcedure,
		svc.ListModels,
		connect.WithSchema(adminServiceMethods.ByName("ListModels")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetModelSchemaHandler := connect.NewUnaryHandler(
		AdminServiceGetModelSchemaProcedure,
		svc.GetModelSchema,
		connect.WithSchema(adminServiceMethods.ByName("GetModelSchema")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceListObjectsHandler := connect.NewUnaryHandler(
		AdminServiceListObjectsProcedure,
		svc.ListObjects,
		connect.WithSchema(adminServiceMethods.ByName("ListObjects")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceGetObjectHandler := connect.NewUnaryHandler(
		AdminServiceGetObjectProcedure,
		svc.GetObject,
		connect.WithSchema(adminServiceMethods.ByName("GetObject")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceCreateObjectHandler := connect.NewUnaryHandler(
		AdminServiceCreateObjectProcedure,
		svc.CreateObject,
		connect.WithSchema(adminServiceMethods.ByName("CreateObject")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceUpdateObjectHandler := connect.NewUnaryHandler(
		AdminServiceUpdateObjectProcedure,
		svc.UpdateObject,
		connect.WithSchema(adminServiceMethods.ByName("UpdateObject")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceDeleteObjectHandler := connect.NewUnaryHandler(
		AdminServiceDeleteObjectProcedure,
		svc.DeleteObject,
		connect.WithSchema(adminServiceMethods.ByName("DeleteObject")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceDeleteObjectsHandler := connect.NewUnaryHandler(
		AdminServiceDeleteObjectsProcedure,
		svc.DeleteObjects,
		connect.WithSchema(adminServiceMethods.ByName("DeleteObjects")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceExecuteActionHandler := connect.NewUnaryHandler(
		AdminServiceExecuteActionProcedure,
		svc.ExecuteAction,
		connect.WithSchema(adminServiceMethods.ByName("ExecuteAction")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceListActionsHandler := connect.NewUnaryHandler(
		AdminServiceListActionsProcedure,
		svc.ListActions,
		connect.WithSchema(adminServiceMethods.ByName("ListActions")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceSearchObjectsHandler := connect.NewUnaryHandler(
		AdminServiceSearchObjectsProcedure,
		svc.SearchObjects,
		connect.WithSchema(adminServiceMethods.ByName("SearchObjects")),
		connect.WithHandlerOptions(opts...),
	)
	return "/gojango.admin.AdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AdminServiceListModelsProcedure:
			adminServiceListModelsHandler.ServeHTTP(w, r)
		case AdminServiceGetModelSchemaProcedure:
			adminServiceGetModelSchemaHandler.ServeHTTP(w, r)
		case AdminServiceListObjectsProcedure:
			adminServiceListObjectsHandler.ServeHTTP(w, r)
		case AdminServiceGetObjectProcedure:
			adminServiceGetObjectHandler.ServeHTTP(w, r)
		case AdminServiceCreateObjectProcedure:
			adminServiceCreateObjectHandler.ServeHTTP(w, r)
		case AdminServiceUpdateObjectProcedure:
			adminServiceUpdateObjectHandler.ServeHTTP(w, r)
		case AdminServiceDeleteObjectProcedure:
			adminServiceDeleteObjectHandler.ServeHTTP(w, r)
		case AdminServiceDeleteObjectsProcedure:
			adminServiceDeleteObjectsHandler.ServeHTTP(w, r)
		case AdminServiceExecuteActionProcedure:
			adminServiceExecuteActionHandler.ServeHTTP(w, r)
		case AdminServiceListActionsProcedure:
			adminServiceListActionsHandler.ServeHTTP(w, r)
		case AdminServiceSearchObjectsProcedure:
			adminServiceSearchObjectsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAdminServiceHandler struct{}

func (UnimplementedAdminServiceHandler) ListModels(context.Context, *connect.Request[proto.ListModelsRequest]) (*connect.Response[proto.ListModelsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gojango.admin.AdminService.ListModels is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetModelSchema(context.Context, *connect.Request[proto.GetModelSchemaRequest]) (*connect.Response[proto.GetModelSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gojango.admin.AdminService.GetModelSchema is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListObjects(context.Context, *connect.Request[proto.ListObjectsRequest]) (*connect.Response[proto.ListObjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gojango.admin.AdminService.ListObjects is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetObject(context.Context, *connect.Request[proto.GetObjectRequest]) (*connect.Response[proto.GetObjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gojango.admin.AdminService.GetObject is not implemented"))
}

func (UnimplementedAdminServiceHandler) CreateObject(context.Context, *connect.Request[proto.CreateObjectRequest]) (*connect.Response[proto.CreateObjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gojango.admin.AdminService.CreateObject is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateObject(context.Context, *connect.Request[proto.UpdateObjectRequest]) (*connect.Response[proto.UpdateObjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gojango.admin.AdminService.UpdateObject is not implemented"))
}

func (UnimplementedAdminServiceHandler) DeleteObject(context.Context, *connect.Request[proto.DeleteObjectRequest]) (*connect.Response[proto.DeleteObjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gojango.admin.AdminService.DeleteObject is not implemented"))
}

func (UnimplementedAdminServiceHandler) DeleteObjects(context.Context, *connect.Request[proto.DeleteObjectsRequest]) (*connect.Response[proto.DeleteObjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gojango.admin.AdminService.DeleteObjects is not implemented"))
}

func (UnimplementedAdminServiceHandler) ExecuteAction(context.Context, *connect.Request[proto.ExecuteActionRequest]) (*connect.Response[proto.ExecuteActionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gojango.admin.AdminService.ExecuteAction is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListActions(context.Context, *connect.Request[proto.ListActionsRequest]) (*connect.Response[proto.ListActionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gojango.admin.AdminService.ListActions is not implemented"))
}

func (UnimplementedAdminServiceHandler) SearchObjects(context.Context, *connect.Request[proto.SearchObjectsRequest]) (*connect.Response[proto.SearchObjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gojango.admin.AdminService.SearchObjects is not implemented"))
}
