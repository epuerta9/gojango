name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Build CLI
      run: go build -o bin/gojango ./cmd/gojango

    - name: Test CLI version
      run: ./bin/gojango version

    - name: Test CLI doctor
      run: ./bin/gojango doctor

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  integration-test:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Build CLI
      run: go build -o bin/gojango ./cmd/gojango

    - name: Run integration test
      run: |
        # Create test project
        ./bin/gojango new testproject --module github.com/test/testproject --frontend htmx --database postgres
        
        # Verify project structure
        cd testproject
        test -f main.go
        test -f go.mod
        test -f Makefile
        test -f gojango.yaml
        test -d apps
        
        # Add replace directive for local testing
        go mod edit -replace github.com/epuerta9/gojango=../
        go mod tidy
        
        # Test basic commands
        go run main.go version
        go run main.go apps
        
        # Create an app
        ../bin/gojango startapp blog
        test -f apps/blog/app.go
        test -f apps/blog/views.go
        
        # Test with app imported (manual step for now)
        echo '	_ "github.com/test/testproject/apps/blog"' >> main.go
        sed -i 's|// Import your apps here.*|// Import your apps here (they register themselves via init())|' main.go
        
        # Verify app registration
        go run main.go apps | grep -q "blog"
        
        echo "âœ… Integration test passed!"